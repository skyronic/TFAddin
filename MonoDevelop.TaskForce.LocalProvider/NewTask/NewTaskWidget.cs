// 
// NewTaskWidget.cs
//  
// Author:
//       Anirudh Sanjeev <anirudh@anirudhsanjeev.org>
// 
// Copyright (c) 2009 Anirudh Sanjeev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4918
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Gtk;
using MonoDevelop.TaskForce.Data;
namespace MonoDevelop.TaskForce.LocalProvider.NewTask
{
	
	
	public class NewTaskWidget : Gtk.VBox
	{
		Gtk.HBox hbox1;
		Label label1;
		Entry entry1;
		Button button1;
		
		ProviderData provider1;
		NewTaskView parentView;
		public NewTaskWidget()
		{
			hbox1 = new HBox();
			label1 = new Label("Enter task name: ");
			entry1 = new Entry();
			button1 = new Gtk.Button();
			button1.Label = "Add";
			
			hbox1.PackStart(label1, true, true, 0);
			hbox1.PackStart(entry1, true, true, 0);
			hbox1.PackStart(button1, true, true, 0);
			
			this.PackStart(hbox1, false, false, 0);
			this.ShowAll();
			button1.Clicked += Button1Clicked;
		}

		void Button1Clicked (object sender, EventArgs e)
		{
			// Create a task data
			TaskData newTask = new TaskData();
			newTask.Label = entry1.Text;
			
			// Add the node and update the GUI
			provider1.AddChild(newTask);
					
			// dispose the current iviewcontent
			parentView.Dispose();
		}
		
		public void SetProviderNode(ProviderData node)
		{
			provider1 = node;
		}
		public void SetView(NewTaskView view)
		{
			parentView = view;
		}
	}
}
