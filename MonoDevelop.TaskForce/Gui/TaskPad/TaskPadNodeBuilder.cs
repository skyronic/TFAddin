// 
// TaskPadNodeBuilder.cs
//  
// Author:
//       Anirudh Sanjeev <anirudh@anirudhsanjeev.org>
// 
// Copyright (c) 2009 Anirudh Sanjeev
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4918
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using MonoDevelop.Ide.Gui.Components;
using MonoDevelop.TaskForce.Data;
using MonoDevelop.TaskForce.Utilities;



namespace MonoDevelop.TaskForce.Gui.TaskPad
{
	
	
	/// <summary>
	/// Abstract skeleton nodebuilder
	/// </summary>
	public abstract class TaskPadNodeBuilder : TypeNodeBuilder
	{
		protected LogUtil log;
		public NodeType type;
		
		public TaskPadNodeBuilder() : base()
		{
			
		}
		
		public override string ContextMenuAddinPath {
			get {
				return "/MonoDevelop/TaskForce/TaskPad/ContextMenu";
			}
		}


		
		public override bool HasChildNodes (ITreeBuilder builder, object dataObject)
		{
			// TODO: Anything more to this?
			if(dataObject is NodeData)
			{
				NodeData nodeData = dataObject as NodeData;
				return (nodeData.children.Count > 0);
			}
			return false;
		}
		
	
		public override object GetParentObject (object dataObject)
		{
			if (dataObject is NodeData)
			{
				NodeData nodeData = dataObject as NodeData;
				return nodeData.parent;
			}
			return null;
		}
		
		public override void OnNodeAdded (object dataObject)
		{
			base.OnNodeAdded (dataObject);
			if (dataObject is NodeData)
			{
				NodeData nodeData = dataObject as NodeData;
				nodeData.NodeDataChanged += OnNodeDataChanged;				
			}
		}
		
		public override void OnNodeRemoved (object dataObject)
		{
			base.OnNodeAdded (dataObject);
			if (dataObject is NodeData)
			{
				NodeData nodeData = dataObject as NodeData;
				nodeData.NodeDataChanged -= OnNodeDataChanged;				
			}
		}


		public abstract void OnNodeDataChanged (MonoDevelop.TaskForce.Data.NodeData source, NodeDataChangedEventArgs args);

		
		public abstract void DataTypeComparison(object dataObject);
	}
	
	public abstract class TaskPadNodeCommandHandler : NodeCommandHandler
	{
		LogUtil log;
		public TaskPadNodeCommandHandler ()
		{
			
		}
		public abstract void OnNodeChange ();
		
	}
}
